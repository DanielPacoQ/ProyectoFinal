//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.BridgePayServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transactions", Namespace="http://schemas.datacontract.org/2004/07/BridgePay.WCF.Models")]
    [System.SerializableAttribute()]
    public partial class Transactions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BridgePayServiceClient.ITransactionService")]
    public interface ITransactionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetAllTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetAllTransactionsResponse")]
        WebApplication1.BridgePayServiceClient.Transactions[] GetAllTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetAllTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetAllTransactionsResponse")]
        System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> GetAllTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/PostTransaction", ReplyAction="http://tempuri.org/ITransactionService/PostTransactionResponse")]
        void PostTransaction(WebApplication1.BridgePayServiceClient.Transactions transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/PostTransaction", ReplyAction="http://tempuri.org/ITransactionService/PostTransactionResponse")]
        System.Threading.Tasks.Task PostTransactionAsync(WebApplication1.BridgePayServiceClient.Transactions transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ChangeStatus", ReplyAction="http://tempuri.org/ITransactionService/ChangeStatusResponse")]
        void ChangeStatus(int id, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ChangeStatus", ReplyAction="http://tempuri.org/ITransactionService/ChangeStatusResponse")]
        System.Threading.Tasks.Task ChangeStatusAsync(int id, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ApproveSelectedItems", ReplyAction="http://tempuri.org/ITransactionService/ApproveSelectedItemsResponse")]
        WebApplication1.BridgePayServiceClient.Transactions[] ApproveSelectedItems(int[] Ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ApproveSelectedItems", ReplyAction="http://tempuri.org/ITransactionService/ApproveSelectedItemsResponse")]
        System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> ApproveSelectedItemsAsync(int[] Ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ApproveAllPendings", ReplyAction="http://tempuri.org/ITransactionService/ApproveAllPendingsResponse")]
        WebApplication1.BridgePayServiceClient.Transactions[] ApproveAllPendings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ApproveAllPendings", ReplyAction="http://tempuri.org/ITransactionService/ApproveAllPendingsResponse")]
        System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> ApproveAllPendingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionServiceChannel : WebApplication1.BridgePayServiceClient.ITransactionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionServiceClient : System.ServiceModel.ClientBase<WebApplication1.BridgePayServiceClient.ITransactionService>, WebApplication1.BridgePayServiceClient.ITransactionService {
        
        public TransactionServiceClient() {
        }
        
        public TransactionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebApplication1.BridgePayServiceClient.Transactions[] GetAllTransactions() {
            return base.Channel.GetAllTransactions();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> GetAllTransactionsAsync() {
            return base.Channel.GetAllTransactionsAsync();
        }
        
        public void PostTransaction(WebApplication1.BridgePayServiceClient.Transactions transaction) {
            base.Channel.PostTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task PostTransactionAsync(WebApplication1.BridgePayServiceClient.Transactions transaction) {
            return base.Channel.PostTransactionAsync(transaction);
        }
        
        public void ChangeStatus(int id, int status) {
            base.Channel.ChangeStatus(id, status);
        }
        
        public System.Threading.Tasks.Task ChangeStatusAsync(int id, int status) {
            return base.Channel.ChangeStatusAsync(id, status);
        }
        
        public WebApplication1.BridgePayServiceClient.Transactions[] ApproveSelectedItems(int[] Ids) {
            return base.Channel.ApproveSelectedItems(Ids);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> ApproveSelectedItemsAsync(int[] Ids) {
            return base.Channel.ApproveSelectedItemsAsync(Ids);
        }
        
        public WebApplication1.BridgePayServiceClient.Transactions[] ApproveAllPendings() {
            return base.Channel.ApproveAllPendings();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.BridgePayServiceClient.Transactions[]> ApproveAllPendingsAsync() {
            return base.Channel.ApproveAllPendingsAsync();
        }
    }
}
