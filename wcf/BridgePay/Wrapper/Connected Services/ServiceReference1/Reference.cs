//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transactions", Namespace="http://schemas.datacontract.org/2004/07/BridgePay.WCF.Models")]
    public partial class Transactions : object
    {
        
        private int AmountField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private string NameField;
        
        private int StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount
        {
            get
            {
                return this.AmountField;
            }
            set
            {
                this.AmountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITransactionService")]
    public interface ITransactionService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetAllTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetAllTransactionsResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Transactions[]> GetAllTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/PostTransaction", ReplyAction="http://tempuri.org/ITransactionService/PostTransactionResponse")]
        System.Threading.Tasks.Task PostTransactionAsync(ServiceReference1.Transactions transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/PutApproveSelectedItems", ReplyAction="http://tempuri.org/ITransactionService/PutApproveSelectedItemsResponse")]
        System.Threading.Tasks.Task PutApproveSelectedItemsAsync(int[] Ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/ApproveAllPendings", ReplyAction="http://tempuri.org/ITransactionService/ApproveAllPendingsResponse")]
        System.Threading.Tasks.Task ApproveAllPendingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface ITransactionServiceChannel : ServiceReference1.ITransactionService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class TransactionServiceClient : System.ServiceModel.ClientBase<ServiceReference1.ITransactionService>, ServiceReference1.ITransactionService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TransactionServiceClient() : 
                base(TransactionServiceClient.GetDefaultBinding(), TransactionServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITransactionService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransactionServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TransactionServiceClient.GetBindingForEndpoint(endpointConfiguration), TransactionServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransactionServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TransactionServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransactionServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TransactionServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TransactionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Transactions[]> GetAllTransactionsAsync()
        {
            return base.Channel.GetAllTransactionsAsync();
        }
        
        public System.Threading.Tasks.Task PostTransactionAsync(ServiceReference1.Transactions transaction)
        {
            return base.Channel.PostTransactionAsync(transaction);
        }
        
        public System.Threading.Tasks.Task PutApproveSelectedItemsAsync(int[] Ids)
        {
            return base.Channel.PutApproveSelectedItemsAsync(Ids);
        }
        
        public System.Threading.Tasks.Task ApproveAllPendingsAsync()
        {
            return base.Channel.ApproveAllPendingsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITransactionService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITransactionService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/BridgePay.WCF/TransactionService/Tran" +
                        "sactionService");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TransactionServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITransactionService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TransactionServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITransactionService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ITransactionService,
        }
    }
}
